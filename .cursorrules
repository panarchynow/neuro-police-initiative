# Neuro Police Initiative / Набор инструментов для энфорсмента контрактов для волюнтаристских сообществ

## Как работает
- Существуют проекты (Project)
- У проектов есть протоколы (Protocol)
- Каждый протокол содержит набор инструкций (Instruction)
- Для расследования и отчетов есть оперативники (Operative)
- Входной скрипт (index.ts) запускает определенный проект с набором протоколов
- Скрипт идет по протоколом и запускает инструкции с настройками из протокола
- Инструкции проверяют соблюден ли контракт
- Часть данных открыта для всех, например, данные из блокчейна Stellar
- Для другой части данных нужны оперативники
- Оперативник может исследовать платформы, к которым у него есть доступ, например, чаты в Telegram
- Если какой-либо протокол несоблюден, оперативник должен указать на это на доступных ему площадках
- Если несоблюдение продолжается спустя какое-то время из настроек протокола, запускается другой протокол

## Технологии
- NodeJS как рантайм
- TypeScript как основной язык
- Bun как менеджер пакетов
- Stellar SDK для доступа к данным Horizon и блокчейну Stellar
- Telegraf как SDK для ботов в Telegram
- ts-standard как линтер
- pino для логов
- vitest для тестирования
- commander.js для запуска

## Лучшие практики
- Используй только TypeScript и все его преимущества
- Предпочитай функциональный стиль
- Используй строгую типизацию, не используй `any`
- Предпочитай плоскую структуру файлов
- Соблюдай принципы SOLID
- Пиши код через тесты TDD
- Описывай документацию в README.md
- Логируй все важные события в программе
- Настраивай приложение через переменные окружения
- Всегда используй импорты через алиас "@"
- Никогда не редактируй и не читай .env, работай с .env.example

## Работа агента
- Перед выполнением опиши какие изменения и зачем будут сделаны
- Уточни у пользователя все ли правильно понятно и будут ли правки к плану выполнения
- Разбивай задачи на мелкие правки, при которых работоспособность кода будет сохраняться
- Всегда пиши тесты в ./tests и документацию в ./README.md
- Сверяйся с текущей документацией и работай в том же стиле
- Запускай тесты через `npx vitest run`
- После выполнения задачи ВСЕГДА запускай тесты и убеждайся, что ничего не сломалось

## Документация README.md
- Должно быть введение что это и для чего
- Как установить и запустить
- Краткий обзор инструкций с примерами запуска

## Командный интерфейс
- Логику можно запустить через командную строку
- Запуская проект, запускаются все протоколы и инструкции в нем
- Запуская протокол, запускается определенный протокол в определенном проекте
- Инструкции можно запускать по одиночке
- Должна быть возможность запускать проверки не запуская оперативника с отчетом

## Внешние интеграции
- Описание API в формате Swagger для Grist ./docs/grist.yml
- Пример клиента для Grist на Python ./docs/grist_client_example.py
- Описание API для микросервиса Telegram Members ./docs/telegram-members.md

## Структура папок
/neuro-police-initiative
│── /src
│── │── /projects              # Проекты (например, "Монтелиберо", "Проект X")
│   │   │── /montelibero
│   │   │   │── index.ts       # Главный файл проекта
│   │   │   │── config.ts      # Конфигурация проекта
│   │   │   └── data.json      # Исходные данные (опционально)
│   │── /protocols             # Протоколы (разделены по проектам)
│   │   │── /montelibero       # Протоколы для "Монтелиберо"
│   │   │   │── governance.ts  # "Проверка основания участия в Распределенном правлении"
│   │   │   │── assembly.ts    # "Проверка оснований участия в Собрании"
│   │   │   │── council.ts     # "Проверка оснований участия в Совете"
│   │── /instructions          # Инструкции (повторно используемые в разных протоколах)
│   │   │── check-token.ts     # "Проверить наличие токена"
│   │   │── check-payment.ts   # "Проверить наличие платежа"
│   │   │── verify-identity.ts # "Проверить верификацию личности"
│   │── /operatives            # Оперативники, выполняющие проверки
│   │   │── /telegram          # Оперативники, работающие в Telegram
│   │   │   │── operative1.ts
│   │   │   │── operative2.ts
│   │   │── /stellar           # Оперативники, работающие с блокчейном Stellar
│   │   │   │── stellar-lookup.ts
│   │── /core                  # Внутренний механизм работы системы
│   │   │── project.ts         # Класс для работы с проектами
│   │   │── protocol.ts        # Класс для работы с протоколами
│   │   │── instruction.ts     # Класс для работы с инструкциями
│   │   │── executor.ts        # Главный исполнитель инструкций
│   │── /services              # Взаимодействие с внешними API
│   │   │── stellar.ts         # Доступ к блокчейну Stellar
│   │   │── telegram.ts        # Доступ к Telegram API
│   │── /config                # Общие настройки приложения
│   │   │── settings.ts        # Глобальные параметры
│   │   │── env.ts             # Загрузка переменных окружения
│   │── /utils                 # Вспомогательные утилиты
│   │   │── logger.ts          # Логирование событий
│   │   │── timer.ts           # Управление таймерами
│   │── index.ts               # Главная точка входа в приложение и командный интерфейс
│── /tests                 # Тесты
│   │── /core
│   │── /protocols
│   │── /instructions
│── package.json           # Основной package.json (Bun)
│── bun.lockb              # Лок-файл Bun
│── tsconfig.json          # Конфигурация TypeScript
│── .gitignore             # Игнорируемые файлы
│── README.md              # Документация проекта
